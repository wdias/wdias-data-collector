{"version":3,"sources":["modules/Pods.js","modules/Resources.js","App.js","serviceWorker.js","index.js"],"names":["Colors","Pods","props","state","chartData","helmCharts","timeoutRef","undefined","start","end","console","log","this","namespace","loadData","setInterval","setState","prevProps","clearInterval","axios","get","dataServer","res","status","data","loadCharts","query_string","filter","k","map","d","format","join","helmChart","col","timestamp","name","split","replace","podsPerHelmChart","pod","noPods","type","value","clone","add","subtract","utc","moment","lastTimestamp","reduceRight","prev","curr","max","PodList","Object","values","PodGroups","reduce","concat","Groups","includes","className","Button","variant","onClick","onBlur","onChangeDateTime","onChange","onFocus","onFocusDatetime","strictParsing","view","width","height","syncId","margin","top","right","left","bottom","strokeDasharray","dataKey","padding","chartName","i","stroke","length","fill","key","keys","groupName","j","find","toUpperCase","Component","defaultProps","Resources","resourcesPerPodPerHelmChart","Math","ceil","resourcesPerPod","p","c","cpu","parseInt","slice","memory","yAxisId","label","orientation","App","route","DropdownButton","id","title","size","Dropdown","Item","onRouteChange","onNamespaceChange","onViewChange","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.173c13ec.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\nimport { Button } from 'react-bootstrap';\nimport Datetime from 'react-datetime';\nimport moment from 'moment';\nimport PodGroups from './PodGroups.json'\n\nconst Colors = ['#e6194b', '#3cb44b', '#ffe119', '#4363d8', '#f58231', '#911eb4', '#46f0f0', '#f032e6', '#bcf60c', '#fabebe', '#008080', '#e6beff', '#9a6324', '#fffac8', '#800000', '#aaffc3', '#808000', '#ffd8b1', '#000075', '#808080', '#ffffff', '#000000'];\n\nclass Pods extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      chartData: [],\n      helmCharts: [],\n      timeoutRef: undefined,\n      start: null,\n      end: null,\n    };\n  }\n  componentDidMount() {\n    console.log('did mount:', this.props.namespace)\n    this.loadData();\n    const timeoutRef = setInterval(() => {\n      this.loadData();\n    }, 30 * 1000);\n    this.setState({...this.state, timeoutRef});\n  }\n  componentDidUpdate(prevProps) {\n    if (this.props.namespace !== prevProps.namespace) {\n      this.loadData();\n    }\n  }\n  componentWillUnmount() {\n    console.log('will unmount:', this.props.namespace);\n    if (this.state.timeoutRef) {\n      clearInterval(this.state.timeoutRef);\n    }\n  }\n  async loadCharts(namespace) {\n    const res = await axios.get(`${this.props.dataServer}/metrics/${namespace === 'all' ? '' : `namespace/${namespace}/`}helmCharts`);\n    if (res.status === 200) {\n      if (!res.data) {\n        return\n      }\n      this.setState({ helmCharts: res.data });\n    }\n  }\n  async loadData() {\n    const namespace = this.props.namespace;\n    await this.loadCharts(namespace);\n    const {start, end} = this.state;\n    const query_string = [['start', start], ['end', end]].filter(k => k && k[1]).map(d => `${d[0]}=${d[1].format('YYYY-MM-DDTHH:mm[:00Z]')}`).join('&');\n    const res = await axios.get(`${this.props.dataServer}/metrics${namespace === 'all' ? '' : '/namespace/' + namespace}?${query_string}`);\n    if (res.status === 200) {\n      const d = res.data;\n      if (!d) {\n        return\n      }\n      const chartData = d.map(helmChart => {\n        let col = {\n          timestamp: helmChart.timestamp,\n          name: helmChart.timestamp.split('T')[1].replace(':00Z', ''),\n        };\n        for (const pod of helmChart.podsPerHelmChart) {\n          col[pod.helmChart] = pod.noPods;\n        }\n        return col;\n      });\n      console.log(\"final:\", chartData)\n      this.setState({ chartData: chartData });\n    }\n  }\n  onChangeDateTime(type, value) {\n    let {start, end} = this.state;\n    if (type === 'start' && start) {\n      start = value;\n      end = (end !== null && start > end) ? start.clone().add(30, 'minute') : end;\n    }\n    if (type === 'end' && end) {\n      end = value;\n      start = (start !== null && start > end) ? end.clone().subtract(30, 'minute') : start;\n    }\n    console.log(start ? start.utc().format('YYYY-MM-DDTHH:mm:ss'): '', end ? end.utc().format('YYYY-MM-DDTHH:mm:ss'): '');\n    this.setState({\n      ...this.state,\n      start,\n      end,\n    });\n  }\n  onFocusDatetime(type) {\n    const {start, end} = this.state;\n    console.log('on focus', type, start, end)\n    if(type === 'start' && this.state.start === null) {\n      this.setState({...this.state, start: (end === null ? new moment(): end.clone()).subtract(30, 'minute')});\n    }\n    if(type === 'end' && this.state.end === null) {\n      const lastTimestamp = this.state.chartData.reduceRight((prev, curr) => moment.max(prev, new moment(curr.timestamp)), new moment('1970-01-01T00:00:00Z'));\n      console.log('lastTimestamp: ', lastTimestamp.format('YYYY-MM-DDTHH:mm:ss'));\n      this.setState({...this.state, end: start === null ? lastTimestamp: (new moment() < start.clone().add(30, 'minute') ? new moment() : start.clone().add(30, 'minute'))});\n    }\n  }\n  render() {\n    const PodList = Object.values(PodGroups).reduce((prev, curr) => prev.concat(curr), []);\n    const Groups = {...PodGroups, 'other': this.state.helmCharts.filter(k => !PodList.includes(k))};\n    return (\n      <div>\n        <div className=\"Menu\">\n          <Button variant=\"outline-primary\" onClick={() => this.loadData()}>Refresh</Button>\n          <div>Starts :</div>\n          <Datetime \n            value={this.state.start}\n            onBlur={(d) => this.onChangeDateTime('start', d)}\n            onChange={(d) => this.onChangeDateTime('start', d)}\n            onFocus={() => this.onFocusDatetime('start')}\n            strictParsing={false}\n            />\n          <div>Ends :</div>\n          <Datetime\n            value={this.state.end} \n            onBlur={(d) => this.onChangeDateTime('end', d)}\n            onChange={(d) => this.onChangeDateTime('end', d)}\n            onFocus={() => this.onFocusDatetime('end')}\n          />\n        </div>\n        {this.props.view === 'all' && <div>\n          <h5>Pods Per HelmChart</h5>\n          <LineChart width={1000} height={200} data={this.state.chartData} syncId=\"anyId\" margin={{ top: 10, right: 30, left: 0, bottom: 0, 'text-align': 'center' }}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"name\" padding={{ left: 30, right: 30 }} />\n            <YAxis />\n            <Tooltip />\n            <Legend />\n            {this.state.helmCharts.map((chartName, i) => <Line type='monotone' dataKey={chartName} stroke={Colors[i%Colors.length]} fill={Colors[i%Colors.length]} name={chartName} key={chartName} />)}\n          </LineChart>\n        </div>}\n        {this.props.view === 'per-pod' && Object.keys(Groups).map((groupName, j) => {\n          if (!Groups[groupName].find(k => this.state.helmCharts.includes(k))) {\n            return\n          }\n          return (\n            <div key={`chartGroup-${groupName}`}>\n              <hr/>\n              <h3>{groupName.toUpperCase()}</h3>\n              {Groups[groupName].filter(k => this.state.helmCharts.includes(k)).map((chartName, i) => {\n                return (\n                  <div key={`helmChart-${chartName}`}>\n                    <h5>{chartName}</h5>\n                    <LineChart width={1000} height={200} data={this.state.chartData} syncId=\"anyId\" margin={{ top: 10, right: 30, left: 0, bottom: 0, 'text-align': 'center' }}>\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <XAxis dataKey=\"name\" padding={{ left: 30, right: 30 }} />\n                      <YAxis />\n                      <Tooltip />\n                      <Legend />\n                      <Line type='monotone' dataKey={chartName} stroke={Colors[i%Colors.length]} fill={Colors[i%Colors.length]} />\n                    </LineChart>\n                  </div>\n                );\n              })}\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nPods.propTypes = {\n  namespace: PropTypes.string,\n  view: PropTypes.string,\n  dataServer: PropTypes.string\n}\n\nPods.defaultProps = {\n  namespace: 'dafault',\n  view: 'all'\n}\n\nexport default Pods;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\nimport { Button } from 'react-bootstrap';\nimport Datetime from 'react-datetime';\nimport moment from 'moment';\nimport PodGroups from './PodGroups.json'\n\nconst Colors = ['#e6194b', '#3cb44b', '#ffe119', '#4363d8', '#f58231', '#911eb4', '#46f0f0', '#f032e6', '#bcf60c', '#fabebe', '#008080', '#e6beff', '#9a6324', '#fffac8', '#800000', '#aaffc3', '#808000', '#ffd8b1', '#000075', '#808080', '#ffffff', '#000000'];\n\nclass Resources extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      chartData: [],\n      helmCharts: [],\n      timeoutRef: undefined,\n      start: null,\n      end: null,\n    };\n  }\n  componentDidMount() {\n    console.log('did mount:', this.props.namespace)\n    this.loadData();\n    const timeoutRef = setInterval(() => {\n      this.loadData();\n    }, 30 * 1000);\n    this.setState({...this.state, timeoutRef});\n  }\n  componentDidUpdate(prevProps) {\n    if (this.props.namespace !== prevProps.namespace) {\n      this.loadData();\n    }\n  }\n  componentWillUnmount() {\n    console.log('will unmount:', this.props.namespace);\n    if (this.state.timeoutRef) {\n      clearInterval(this.state.timeoutRef);\n    }\n  }\n  async loadCharts(namespace) {\n    const res = await axios.get(`${this.props.dataServer}/metrics/${namespace === 'all' ? '' : `namespace/${namespace}/`}helmCharts`);\n    if (res.status === 200) {\n      if (!res.data) {\n        return\n      }\n      this.setState({ helmCharts: res.data });\n    }\n  }\n  async loadData() {\n    const namespace = this.props.namespace;\n    await this.loadCharts(namespace);\n    const {start, end} = this.state;\n    const query_string = [['start', start], ['end', end]].filter(k => k && k[1]).map(d => `${d[0]}=${d[1].format('YYYY-MM-DDTHH:mm[:00Z]')}`).join('&');\n    const res = await axios.get(`${this.props.dataServer}/metrics/${namespace === 'all' ? '' : `namespace/${namespace}/`}resources?${query_string}`);\n    if (res.status === 200) {\n      const d = res.data;\n      if (!d) {\n        return\n      }\n      console.log(d);\n      const chartData = d.map(helmChart => {\n        if (!helmChart.resourcesPerPodPerHelmChart) {\n          return;\n        }\n        let col = {\n          timestamp: helmChart.timestamp,\n          name: helmChart.timestamp.split('T')[1].replace(':00Z', ''),\n        };\n        for (const pod of helmChart.resourcesPerPodPerHelmChart) {\n          col[`cpu-${pod.helmChart}`] = Math.ceil(pod.resourcesPerPod.reduce((p, c) => {\n            return p + c.cpu.length > 1 ? parseInt(c.cpu.slice(0, -1)) : 0\n          }, 0) / 1000000);\n          col[`memory-${pod.helmChart}`] = pod.resourcesPerPod.reduce((p, c) => {\n            return p + parseInt(c.memory.slice(0, -2)) / 1024\n          }, 0);\n        }\n        return col;\n      });\n      console.log(\"final:\", chartData)\n      this.setState({ chartData: chartData });\n    }\n  }\n  onChangeDateTime(type, value) {\n    let {start, end} = this.state;\n    if (type === 'start' && start) {\n      start = value;\n      end = (end !== null && start > end) ? start.clone().add(30, 'minute') : end;\n    }\n    if (type === 'end' && end) {\n      end = value;\n      start = (start !== null && start > end) ? end.clone().subtract(30, 'minute') : start;\n    }\n    console.log(start ? start.utc().format('YYYY-MM-DDTHH:mm:ss'): '', end ? end.utc().format('YYYY-MM-DDTHH:mm:ss'): '');\n    this.setState({\n      ...this.state,\n      start,\n      end,\n    });\n  }\n  onFocusDatetime(type) {\n    const {start, end} = this.state;\n    console.log('on focus', type, start, end)\n    if(type === 'start' && this.state.start === null) {\n      this.setState({...this.state, start: (end === null ? new moment(): end.clone()).subtract(30, 'minute')});\n    }\n    if(type === 'end' && this.state.end === null) {\n      const lastTimestamp = this.state.chartData.reduceRight((prev, curr) => moment.max(prev, new moment(curr.timestamp)), new moment('1970-01-01T00:00:00Z'));\n      console.log('lastTimestamp: ', lastTimestamp.format('YYYY-MM-DDTHH:mm:ss'));\n      this.setState({...this.state, end: start === null ? lastTimestamp: (new moment() < start.clone().add(30, 'minute') ? new moment() : start.clone().add(30, 'minute'))});\n    }\n  }\n  render() {\n    const PodList = Object.values(PodGroups).reduce((prev, curr) => prev.concat(curr), []);\n    const Groups = {...PodGroups, 'other': this.state.helmCharts.filter(k => !PodList.includes(k))};\n    return (\n      <div>\n        <div className=\"Menu\">\n          <Button variant=\"outline-primary\" onClick={() => this.loadData()}>Refresh</Button>\n          <div>Starts :</div>\n          <Datetime \n            value={this.state.start}\n            onBlur={(d) => this.onChangeDateTime('start', d)}\n            onChange={(d) => this.onChangeDateTime('start', d)}\n            onFocus={() => this.onFocusDatetime('start')}\n            strictParsing={false}\n            />\n          <div>Ends :</div>\n          <Datetime\n            value={this.state.end} \n            onBlur={(d) => this.onChangeDateTime('end', d)}\n            onChange={(d) => this.onChangeDateTime('end', d)}\n            onFocus={() => this.onFocusDatetime('end')}\n          />\n        </div>\n        {this.props.view === 'all' && <div>\n          <h5>CPU usage Per HelmChart</h5>\n          <LineChart width={1000} height={200} data={this.state.chartData} syncId=\"anyId\" margin={{ top: 10, right: 30, left: 0, bottom: 0, 'text-align': 'center' }}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"name\" padding={{ left: 30, right: 30 }} />\n            <YAxis />\n            <Tooltip />\n            <Legend />\n            {this.state.helmCharts.map((chartName, i) => <Line type='monotone' dataKey={`cpu-${chartName}`} stroke={Colors[i % Colors.length]} fill={Colors[i % Colors.length]} name={chartName} key={chartName} />)}\n          </LineChart>\n          <h5>Memory usage Per HelmChart</h5>\n          <LineChart width={1000} height={200} data={this.state.chartData} syncId=\"anyId\" margin={{ top: 10, right: 30, left: 0, bottom: 0, 'text-align': 'center' }}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"name\" padding={{ left: 30, right: 30 }} />\n            <YAxis />\n            <Tooltip />\n            <Legend />\n            {this.state.helmCharts.map((chartName, i) => <Line type='monotone' dataKey={`memory-${chartName}`} stroke={Colors[i % Colors.length]} fill={Colors[i % Colors.length]} name={chartName} key={chartName} />)}\n          </LineChart>\n        </div>}\n        {this.props.view === 'per-pod' && Object.keys(Groups).map((groupName, j) => {\n          if (!Groups[groupName].find(k => this.state.helmCharts.includes(k))) {\n            return\n          }\n          return (\n            <div key={`chartGroup-${groupName}`}>\n              <hr/>\n              <h3>{groupName.toUpperCase()}</h3>\n              {Groups[groupName].filter(k => this.state.helmCharts.includes(k)).map((chartName, i) => {\n                return (\n                  <div key={`helmChart-${chartName}`}>\n                    <h5>{chartName}</h5>\n                    <LineChart width={1000} height={200} data={this.state.chartData} syncId=\"anyId\" margin={{ top: 10, right: 30, left: 0, bottom: 0, 'text-align': 'center' }}>\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <XAxis dataKey=\"name\" padding={{ left: 30, right: 30 }} />\n                      <YAxis yAxisId=\"left\" label=\"CPU\" />\n                      <YAxis yAxisId=\"right\" orientation=\"right\" label=\"Memory\" />\n                      <Tooltip />\n                      <Legend />\n                      <Line yAxisId=\"left\" type='monotone' dataKey={`cpu-${chartName}`} stroke={Colors[i % Colors.length]} fill={Colors[i % Colors.length]} />\n                      <Line yAxisId=\"right\" type='monotone' dataKey={`memory-${chartName}`} stroke={Colors[i + 1 % Colors.length]} fill={Colors[i % Colors.length]} />\n                    </LineChart>\n                  </div>\n                );\n              })}\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nResources.propTypes = {\n  namespace: PropTypes.string,\n  view: PropTypes.string,\n  dataServer: PropTypes.string\n}\n\nResources.defaultProps = {\n  namespace: 'dafault',\n  view: 'all'\n}\n\nexport default Resources;","import React, { Component } from 'react';\nimport { DropdownButton, Dropdown } from 'react-bootstrap';\nimport Pods from './modules/Pods';\nimport Resources from './modules/Resources';\nimport './css/App.css';\nimport './css/react-datetime.css';\n\nconst dataServer = 'http://analysis-api.wdias.com'\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      route: '/resources', // '/pods', '/resources'\n      namespace: 'default',\n      view: 'all', // '/all', '/per-pod'\n    };\n  }\n  componentDidMount() {\n  }\n  onNamespaceChange(namespace) {\n    this.setState({\n      ...this.state,\n      namespace,\n    });\n  }\n  onRouteChange(route) {\n    this.setState({\n      ...this.state,\n      route,\n    });\n  }\n  onViewChange(view) {\n    this.setState({\n      ...this.state,\n      view,\n    });\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"Menu\">\n          <DropdownButton id=\"dropdown-view\" title={this.state.route} size=\"lg\">\n            <Dropdown.Item onClick={() => this.onRouteChange('/pods')}>/pods</Dropdown.Item>\n            <Dropdown.Item onClick={() => this.onRouteChange('/resources')}>/resources</Dropdown.Item>\n          </DropdownButton>\n          {/* <Dropdown options={['/pods', '/resources']} onChange={(val) => this.onRouteChange(val)} value={'/pods'} placeholder=\"Select an option\" /> */}\n          <DropdownButton id=\"dropdown-namespace\" title={this.state.namespace} size=\"lg\">\n            <Dropdown.Item onClick={() => this.onNamespaceChange('default')}>Default</Dropdown.Item>\n            <Dropdown.Item onClick={() => this.onNamespaceChange('kube-system')}>Kube-System</Dropdown.Item>\n            <Dropdown.Item onClick={() => this.onNamespaceChange('all')}>All</Dropdown.Item>\n          </DropdownButton>\n          {/* <Dropdown options={['default', 'kube-system', 'all']} onChange={(val) => this.onNamespaceChange(val)} value={'default'} placeholder=\"Select an option\" /> */}\n          <DropdownButton id=\"dropdown-view\" title={this.state.view} size=\"lg\">\n            <Dropdown.Item onClick={() => this.onViewChange('all')}>all</Dropdown.Item>\n            <Dropdown.Item onClick={() => this.onViewChange('per-pod')}>per-pod</Dropdown.Item>\n          </DropdownButton>\n        </div>\n        <header className=\"App-header\">\n          {this.state.route === '/pods' && <Pods namespace={this.state.namespace} view={this.state.view} dataServer={dataServer} />}\n          {this.state.route === '/resources' && <Resources namespace={this.state.namespace} view={this.state.view} dataServer={dataServer} />}\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}